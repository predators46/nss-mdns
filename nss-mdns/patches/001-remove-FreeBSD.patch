--- a/src/util.h
+++ b/src/util.h
@@ -106,16 +106,6 @@ enum nss_status convert_userdata_for_name_to_hostent(const userdata_t* u,
                                                      buffer_t* buf, int* errnop,
                                                      int* h_errnop);
 
-// Converts from the userdata struct into the gaih_addrtuple format, used by
-// gethostbyaddr4_r.
-#ifndef __FreeBSD__
-enum nss_status convert_userdata_to_addrtuple(const userdata_t* u,
-                                              const char* name,
-                                              struct gaih_addrtuple** pat,
-                                              buffer_t* buf, int* errnop,
-                                              int* h_errnop);
-#endif
-
 // Appends a query_address_result to userdata.
 void append_address_to_userdata(const query_address_result_t* result,
                                 userdata_t* u);
                                 

--- a/src/nss.c
+++ b/src/nss.c
@@ -147,28 +147,6 @@ enum nss_status _nss_mdns_gethostbyname_impl(const char* name, int af,
     }
 }
 
-#ifndef __FreeBSD__
-enum nss_status _nss_mdns_gethostbyname4_r(const char* name,
-                                           struct gaih_addrtuple** pat,
-                                           char* buffer, size_t buflen,
-                                           int* errnop, int* h_errnop,
-                                           int32_t* ttlp) {
-
-    (void)ttlp;
-
-    userdata_t u;
-    buffer_t buf;
-
-    enum nss_status status =
-        _nss_mdns_gethostbyname_impl(name, AF_UNSPEC, &u, errnop, h_errnop);
-    if (status != NSS_STATUS_SUCCESS) {
-        return status;
-    }
-    buffer_init(&buf, buffer, buflen);
-    return convert_userdata_to_addrtuple(&u, name, pat, &buf, errnop, h_errnop);
-}
-#endif
-
 enum nss_status _nss_mdns_gethostbyname3_r(const char* name, int af,
                                            struct hostent* result, char* buffer,
                                            size_t buflen, int* errnop,

--- a/src/util.c
+++ b/src/util.c
@@ -114,23 +114,6 @@ verify_name_result_t verify_name_allowed(const char* name,
     }
 }
 
-int local_soa(void) {
-    /* FreeBSD requires the state to be zeroed before calling res_ninit() */
-    struct __res_state state = {
-        0,
-    };
-    int result;
-    unsigned char answer[NS_MAXMSG];
-
-    result = res_ninit(&state);
-    if (result == -1)
-        return 0;
-    result =
-        res_nquery(&state, "local", ns_c_in, ns_t_soa, answer, sizeof answer);
-    res_nclose(&state);
-    return result > 0;
-}
-
 int label_count(const char* name) {
     // Start with single label.
     int count = 1;
@@ -211,67 +194,6 @@ enum nss_status convert_userdata_for_name_to_hostent(const userdata_t* u,
     return NSS_STATUS_SUCCESS;
 }
 
-#ifndef __FreeBSD__
-enum nss_status convert_userdata_to_addrtuple(const userdata_t* u,
-                                              const char* name,
-                                              struct gaih_addrtuple** pat,
-                                              buffer_t* buf, int* errnop,
-                                              int* h_errnop) {
-
-    // Copy name to buffer (referenced in every result address tuple).
-    char* buffer_name = buffer_strdup(buf, name);
-    RETURN_IF_FAILED_ALLOC(buffer_name);
-
-    struct gaih_addrtuple* tuple_prev = NULL;
-    for (int i = 0; i < u->count; i++) {
-        const query_address_result_t* result = &u->result[i];
-        struct gaih_addrtuple* tuple;
-        if (tuple_prev == NULL && *pat) {
-            // The caller has provided a valid initial location in *pat,
-            // so use that as the first result. Without this, nscd will
-            // segfault because it assumes that the buffer is only used as
-            // an overflow.
-            // See
-            // https://lists.freedesktop.org/archives/systemd-devel/2013-February/008606.html
-            tuple = *pat;
-            memset(tuple, 0, sizeof(*tuple));
-        } else {
-            // Allocate a new tuple from the buffer.
-            tuple = buffer_alloc(buf, sizeof(struct gaih_addrtuple));
-            RETURN_IF_FAILED_ALLOC(tuple);
-        }
-
-        size_t address_length = result->af == AF_INET ? sizeof(ipv4_address_t)
-                                                      : sizeof(ipv6_address_t);
-
-        // Assign the (always same) name.
-        tuple->name = buffer_name;
-
-        // Assign actual address family of address.
-        tuple->family = result->af;
-
-        // Copy address.
-        memcpy(&(tuple->addr), &(result->address), address_length);
-
-        // Assign interface scope id
-        tuple->scopeid = result->scopeid;
-
-        if (tuple_prev == NULL) {
-            // This is the first tuple.
-            // Return the start of the list in *pat.
-            *pat = tuple;
-        } else {
-            // Link the new tuple into the previous tuple.
-            tuple_prev->next = tuple;
-        }
-
-        tuple_prev = tuple;
-    }
-
-    return NSS_STATUS_SUCCESS;
-}
-#endif
-
 static char* aligned_ptr(char* p) {
     uintptr_t ptr = (uintptr_t)p;
     if (ptr % sizeof(void*)) {

--- a/src/nss.h
+++ b/src/nss.h
@@ -1,5 +1,6 @@
 #ifndef src_nss_h
 #define src_nss_h
+#endif
 
 #if defined(NSS_IPV4_ONLY) && !defined(MDNS_MINIMAL)
 #define _nss_mdns_gethostbyname4_r _nss_mdns4_gethostbyname4_r
@@ -32,21 +33,3 @@
 #define _nss_mdns_gethostbyname_r _nss_mdns_minimal_gethostbyname_r
 #define _nss_mdns_gethostbyaddr_r _nss_mdns_minimal_gethostbyaddr_r
 #endif
-
-// Define prototypes for nss function we're going to export (fixes GCC warnings)
-#ifndef __FreeBSD__
-enum nss_status _nss_mdns_gethostbyname4_r(const char*, struct gaih_addrtuple**,
-                                           char*, size_t, int*, int*, int32_t*);
-#endif
-enum nss_status _nss_mdns_gethostbyname3_r(const char*, int, struct hostent*,
-                                           char*, size_t, int*, int*, int32_t*,
-                                           char**);
-enum nss_status _nss_mdns_gethostbyname2_r(const char*, int, struct hostent*,
-                                           char*, size_t, int*, int*);
-enum nss_status _nss_mdns_gethostbyname_r(const char*, struct hostent*, char*,
-                                          size_t, int*, int*);
-enum nss_status _nss_mdns_gethostbyaddr_r(const void*, int, int,
-                                          struct hostent*, char*, size_t, int*,
-                                          int*);
-
-#endif
